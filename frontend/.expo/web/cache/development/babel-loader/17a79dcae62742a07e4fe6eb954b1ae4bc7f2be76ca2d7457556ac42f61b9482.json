{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { PermissionStatus, createPermissionHook, EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MediaLibrary from \"./ExpoMediaLibrary\";\nvar eventEmitter = new EventEmitter(MediaLibrary);\nexport { PermissionStatus };\nfunction arrayize(item) {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\nfunction getId(ref) {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\nfunction checkAssetIds(assetIds) {\n  if (assetIds.some(function (id) {\n    return !id || typeof id !== 'string';\n  })) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\nfunction checkAlbumIds(albumIds) {\n  if (albumIds.some(function (id) {\n    return !id || typeof id !== 'string';\n  })) {\n    throw new Error('Album ID must be a string!');\n  }\n}\nfunction checkMediaType(mediaType) {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\nfunction checkSortBy(sortBy) {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\nfunction checkSortByKey(sortBy) {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\nfunction sortByOptionToString(sortBy) {\n  if (Array.isArray(sortBy)) {\n    return `${sortBy[0]} ${sortBy[1] ? 'ASC' : 'DESC'}`;\n  }\n  return `${sortBy} DESC`;\n}\nfunction dateToNumber(value) {\n  return value instanceof Date ? value.getTime() : value;\n}\nexport var MediaType = MediaLibrary.MediaType;\nexport var SortBy = MediaLibrary.SortBy;\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!MediaLibrary && 'getAssetsAsync' in MediaLibrary;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function requestPermissionsAsync() {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* () {\n    var writeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!MediaLibrary.requestPermissionsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n    }\n    return yield MediaLibrary.requestPermissionsAsync(writeOnly);\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    var writeOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!MediaLibrary.getPermissionsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n    }\n    return yield MediaLibrary.getPermissionsAsync(writeOnly);\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: function getMethod(options) {\n    return getPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  },\n  requestMethod: function requestMethod(options) {\n    return requestPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  }\n});\nexport function presentPermissionsPickerAsync() {\n  return _presentPermissionsPickerAsync.apply(this, arguments);\n}\nfunction _presentPermissionsPickerAsync() {\n  _presentPermissionsPickerAsync = _asyncToGenerator(function* () {\n    if (!MediaLibrary.presentPermissionsPickerAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n    }\n    return yield MediaLibrary.presentPermissionsPickerAsync();\n  });\n  return _presentPermissionsPickerAsync.apply(this, arguments);\n}\nexport function createAssetAsync(_x) {\n  return _createAssetAsync.apply(this, arguments);\n}\nfunction _createAssetAsync() {\n  _createAssetAsync = _asyncToGenerator(function* (localUri) {\n    if (!MediaLibrary.createAssetAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n    }\n    if (!localUri || typeof localUri !== 'string') {\n      throw new Error('Invalid argument \"localUri\". It must be a string!');\n    }\n    var asset = yield MediaLibrary.createAssetAsync(localUri);\n    if (Array.isArray(asset)) {\n      return asset[0];\n    }\n    return asset;\n  });\n  return _createAssetAsync.apply(this, arguments);\n}\nexport function saveToLibraryAsync(_x2) {\n  return _saveToLibraryAsync.apply(this, arguments);\n}\nfunction _saveToLibraryAsync() {\n  _saveToLibraryAsync = _asyncToGenerator(function* (localUri) {\n    if (!MediaLibrary.saveToLibraryAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n    }\n    return yield MediaLibrary.saveToLibraryAsync(localUri);\n  });\n  return _saveToLibraryAsync.apply(this, arguments);\n}\nexport function addAssetsToAlbumAsync(_x3, _x4) {\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\nfunction _addAssetsToAlbumAsync() {\n  _addAssetsToAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    var copy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!MediaLibrary.addAssetsToAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n    }\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n    if (!albumId || typeof albumId !== 'string') {\n      throw new Error('Invalid album ID. It must be a string!');\n    }\n    if (Platform.OS === 'ios') {\n      return yield MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n    }\n    return yield MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n  });\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\nexport function removeAssetsFromAlbumAsync(_x5, _x6) {\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\nfunction _removeAssetsFromAlbumAsync() {\n  _removeAssetsFromAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n    }\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n    return yield MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n  });\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\nexport function deleteAssetsAsync(_x7) {\n  return _deleteAssetsAsync.apply(this, arguments);\n}\nfunction _deleteAssetsAsync() {\n  _deleteAssetsAsync = _asyncToGenerator(function* (assets) {\n    if (!MediaLibrary.deleteAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n    }\n    var assetIds = arrayize(assets).map(getId);\n    checkAssetIds(assetIds);\n    return yield MediaLibrary.deleteAssetsAsync(assetIds);\n  });\n  return _deleteAssetsAsync.apply(this, arguments);\n}\nexport function getAssetInfoAsync(_x8) {\n  return _getAssetInfoAsync.apply(this, arguments);\n}\nfunction _getAssetInfoAsync() {\n  _getAssetInfoAsync = _asyncToGenerator(function* (asset) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      shouldDownloadFromNetwork: true\n    };\n    if (!MediaLibrary.getAssetInfoAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n    }\n    var assetId = getId(asset);\n    checkAssetIds([assetId]);\n    var assetInfo = yield MediaLibrary.getAssetInfoAsync(assetId, options);\n    if (Array.isArray(assetInfo)) {\n      return assetInfo[0];\n    }\n    return assetInfo;\n  });\n  return _getAssetInfoAsync.apply(this, arguments);\n}\nexport function getAlbumsAsync() {\n  return _getAlbumsAsync.apply(this, arguments);\n}\nfunction _getAlbumsAsync() {\n  _getAlbumsAsync = _asyncToGenerator(function* () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$includeSmartAlbu = _ref.includeSmartAlbums,\n      includeSmartAlbums = _ref$includeSmartAlbu === void 0 ? false : _ref$includeSmartAlbu;\n    if (!MediaLibrary.getAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n    }\n    return yield MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums: includeSmartAlbums\n    });\n  });\n  return _getAlbumsAsync.apply(this, arguments);\n}\nexport function getAlbumAsync(_x9) {\n  return _getAlbumAsync.apply(this, arguments);\n}\nfunction _getAlbumAsync() {\n  _getAlbumAsync = _asyncToGenerator(function* (title) {\n    if (!MediaLibrary.getAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n    }\n    if (typeof title !== 'string') {\n      throw new Error('Album title must be a string!');\n    }\n    return yield MediaLibrary.getAlbumAsync(title);\n  });\n  return _getAlbumAsync.apply(this, arguments);\n}\nexport function createAlbumAsync(_x10, _x11) {\n  return _createAlbumAsync.apply(this, arguments);\n}\nfunction _createAlbumAsync() {\n  _createAlbumAsync = _asyncToGenerator(function* (albumName, asset) {\n    var copyAsset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!MediaLibrary.createAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n    }\n    var assetId = getId(asset);\n    if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n      throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n    }\n    if (!albumName || typeof albumName !== 'string') {\n      throw new Error('Invalid argument \"albumName\". It must be a string!');\n    }\n    if (assetId != null && typeof assetId !== 'string') {\n      throw new Error('Asset ID must be a string!');\n    }\n    if (Platform.OS === 'ios') {\n      return yield MediaLibrary.createAlbumAsync(albumName, assetId);\n    }\n    return yield MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n  });\n  return _createAlbumAsync.apply(this, arguments);\n}\nexport function deleteAlbumsAsync(_x12) {\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\nfunction _deleteAlbumsAsync() {\n  _deleteAlbumsAsync = _asyncToGenerator(function* (albums) {\n    var assetRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!MediaLibrary.deleteAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n    }\n    var albumIds = arrayize(albums).map(getId);\n    checkAlbumIds(albumIds);\n    if (Platform.OS === 'android') {\n      return yield MediaLibrary.deleteAlbumsAsync(albumIds);\n    }\n    return yield MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n  });\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\nexport function getAssetsAsync() {\n  return _getAssetsAsync.apply(this, arguments);\n}\nfunction _getAssetsAsync() {\n  _getAssetsAsync = _asyncToGenerator(function* () {\n    var assetsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!MediaLibrary.getAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n    }\n    var first = assetsOptions.first,\n      after = assetsOptions.after,\n      album = assetsOptions.album,\n      sortBy = assetsOptions.sortBy,\n      mediaType = assetsOptions.mediaType,\n      createdAfter = assetsOptions.createdAfter,\n      createdBefore = assetsOptions.createdBefore;\n    var options = {\n      first: first == null ? 20 : first,\n      after: getId(after),\n      album: getId(album),\n      sortBy: arrayize(sortBy),\n      mediaType: arrayize(mediaType || [MediaType.photo]),\n      createdAfter: dateToNumber(createdAfter),\n      createdBefore: dateToNumber(createdBefore)\n    };\n    if (first != null && typeof options.first !== 'number') {\n      throw new Error('Option \"first\" must be a number!');\n    }\n    if (after != null && typeof options.after !== 'string') {\n      throw new Error('Option \"after\" must be a string!');\n    }\n    if (album != null && typeof options.album !== 'string') {\n      throw new Error('Option \"album\" must be a string!');\n    }\n    if (after != null && Platform.OS === 'android' && isNaN(parseInt(getId(after), 10))) {\n      throw new Error('Option \"after\" must be a valid ID!');\n    }\n    if (first != null && first < 0) {\n      throw new Error('Option \"first\" must be a positive integer!');\n    }\n    options.sortBy.forEach(checkSortBy);\n    options.mediaType.forEach(checkMediaType);\n    options.sortBy = options.sortBy.map(sortByOptionToString);\n    return yield MediaLibrary.getAssetsAsync(options);\n  });\n  return _getAssetsAsync.apply(this, arguments);\n}\nexport function addListener(listener) {\n  return eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n}\nexport function removeSubscription(subscription) {\n  subscription.remove();\n}\nexport function removeAllListeners() {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\nexport function getMomentsAsync() {\n  return _getMomentsAsync.apply(this, arguments);\n}\nfunction _getMomentsAsync() {\n  _getMomentsAsync = _asyncToGenerator(function* () {\n    if (!MediaLibrary.getMomentsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n    }\n    return yield MediaLibrary.getMomentsAsync();\n  });\n  return _getMomentsAsync.apply(this, arguments);\n}\nexport function migrateAlbumIfNeededAsync(_x13) {\n  return _migrateAlbumIfNeededAsync.apply(this, arguments);\n}\nfunction _migrateAlbumIfNeededAsync() {\n  _migrateAlbumIfNeededAsync = _asyncToGenerator(function* (album) {\n    if (!MediaLibrary.migrateAlbumIfNeededAsync) {\n      return;\n    }\n    return yield MediaLibrary.migrateAlbumIfNeededAsync(getId(album));\n  });\n  return _migrateAlbumIfNeededAsync.apply(this, arguments);\n}\nexport function albumNeedsMigrationAsync(_x14) {\n  return _albumNeedsMigrationAsync.apply(this, arguments);\n}\nfunction _albumNeedsMigrationAsync() {\n  _albumNeedsMigrationAsync = _asyncToGenerator(function* (album) {\n    if (!MediaLibrary.albumNeedsMigrationAsync) {\n      return false;\n    }\n    return yield MediaLibrary.albumNeedsMigrationAsync(getId(album));\n  });\n  return _albumNeedsMigrationAsync.apply(this, arguments);\n}","map":{"version":3,"names":["PermissionStatus","createPermissionHook","EventEmitter","UnavailabilityError","Platform","MediaLibrary","eventEmitter","arrayize","item","Array","isArray","getId","ref","id","undefined","checkAssetIds","assetIds","some","Error","checkAlbumIds","albumIds","checkMediaType","mediaType","Object","values","MediaType","indexOf","checkSortBy","sortBy","checkSortByKey","SortBy","sortByOptionToString","dateToNumber","value","Date","getTime","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","requestPermissionsAsync","_requestPermissionsAsync","writeOnly","length","getPermissionsAsync","_getPermissionsAsync","usePermissions","getMethod","options","requestMethod","presentPermissionsPickerAsync","_presentPermissionsPickerAsync","createAssetAsync","_x","_createAssetAsync","localUri","asset","saveToLibraryAsync","_x2","_saveToLibraryAsync","addAssetsToAlbumAsync","_x3","_x4","_addAssetsToAlbumAsync","assets","album","copy","map","albumId","OS","removeAssetsFromAlbumAsync","_x5","_x6","_removeAssetsFromAlbumAsync","deleteAssetsAsync","_x7","_deleteAssetsAsync","getAssetInfoAsync","_x8","_getAssetInfoAsync","shouldDownloadFromNetwork","assetId","assetInfo","getAlbumsAsync","_getAlbumsAsync","_ref","_ref$includeSmartAlbu","includeSmartAlbums","getAlbumAsync","_x9","_getAlbumAsync","title","createAlbumAsync","_x10","_x11","_createAlbumAsync","albumName","copyAsset","deleteAlbumsAsync","_x12","_deleteAlbumsAsync","albums","assetRemove","getAssetsAsync","_getAssetsAsync","assetsOptions","first","after","createdAfter","createdBefore","photo","isNaN","parseInt","forEach","addListener","listener","CHANGE_LISTENER_NAME","removeSubscription","subscription","remove","removeAllListeners","getMomentsAsync","_getMomentsAsync","migrateAlbumIfNeededAsync","_x13","_migrateAlbumIfNeededAsync","albumNeedsMigrationAsync","_x14","_albumNeedsMigrationAsync"],"sources":["C:\\Users\\Beytullah\\Documents\\GitHub\\DentAI\\frontend\\node_modules\\expo-media-library\\src\\MediaLibrary.ts"],"sourcesContent":["import {\n  PermissionResponse as EXPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport MediaLibrary from './ExpoMediaLibrary';\n\nconst eventEmitter = new EventEmitter(MediaLibrary);\n\n// @needsAudit\nexport type PermissionResponse = EXPermissionResponse & {\n  /**\n   * Indicates if your app has access to the whole or only part of the photo library. Possible values are:\n   * - `'all'` if the user granted your app access to the whole photo library\n   * - `'limited'` if the user granted your app access only to selected photos (only available on iOS 14.0+)\n   * - `'none'` if user denied or hasn't yet granted the permission\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\nexport type MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown';\nexport type SortByKey =\n  | 'default'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\nexport type SortByValue = [SortByKey, boolean] | SortByKey;\n\nexport type MediaTypeObject = {\n  audio: 'audio';\n  photo: 'photo';\n  video: 'video';\n  unknown: 'unknown';\n};\n\nexport type SortByObject = {\n  default: 'default';\n  mediaType: 'mediaType';\n  width: 'width';\n  height: 'height';\n  creationTime: 'creationTime';\n  modificationTime: 'modificationTime';\n  duration: 'duration';\n};\n\n// @needsAudit\nexport type Asset = {\n  /**\n   * Internal ID that represents an asset.\n   */\n  id: string;\n  /**\n   * Filename of the asset.\n   */\n  filename: string;\n  /**\n   * URI that points to the asset. `assets://*` (iOS), `file://*` (Android)\n   */\n  uri: string;\n  /**\n   * Media type.\n   */\n  mediaType: MediaTypeValue;\n  /**\n   * An array of media subtypes.\n   * @platform ios\n   */\n  mediaSubtypes?: MediaSubtype[];\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * File creation timestamp.\n   */\n  creationTime: number;\n  /**\n   * Last modification timestamp.\n   */\n  modificationTime: number;\n  /**\n   * Duration of the video or audio asset in seconds.\n   */\n  duration: number;\n  /**\n   * Album ID that the asset belongs to.\n   * @platform android\n   */\n  albumId?: string;\n};\n\n// @needsAudit\nexport type AssetInfo = Asset & {\n  /**\n   * Local URI for the asset.\n   */\n  localUri?: string;\n  /**\n   * GPS location if available.\n   */\n  location?: Location;\n  /**\n   * EXIF metadata associated with the image.\n   */\n  exif?: object;\n  /**\n   * Whether the asset is marked as favorite.\n   * @platform ios\n   */\n  isFavorite?: boolean;\n  /**\n   * This field is available only if flag `shouldDownloadFromNetwork` is set to `false`.\n   * Whether the asset is stored on the network (iCloud on iOS).\n   * @platform ios\n   */\n  isNetworkAsset?: boolean; //iOS only\n  /**\n   * Display orientation of the image. Orientation is available only for assets whose\n   * `mediaType` is `MediaType.photo`. Value will range from 1 to 8, see [EXIF orientation specification](http://sylvana.net/jpegcrop/exif_orientation.html)\n   * for more details.\n   * @platform ios\n   */\n  orientation?: number;\n};\n\n// @docsMissing\nexport type MediaSubtype =\n  | 'depthEffect'\n  | 'hdr'\n  | 'highFrameRate'\n  | 'livePhoto'\n  | 'panorama'\n  | 'screenshot'\n  | 'stream'\n  | 'timelapse';\n\n// @needsAudit\nexport type MediaLibraryAssetInfoQueryOptions = {\n  /**\n   * Whether allow the asset to be downloaded from network. Only available in iOS with iCloud assets.\n   * @default true\n   */\n  shouldDownloadFromNetwork?: boolean;\n};\n\n// @needsAudit\nexport type MediaLibraryAssetsChangeEvent = {\n  /**\n   * Whether the media library's changes could be described as \"incremental changes\".\n   * `true` indicates the changes are described by the `insertedAssets`, `deletedAssets` and\n   * `updatedAssets` values. `false` indicates that the scope of changes is too large and you\n   * should perform a full assets reload (eg. a user has changed access to individual assets in the\n   * media library).\n   */\n  hasIncrementalChanges: boolean;\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been inserted to the library.\n   */\n  insertedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been deleted from the library.\n   */\n  deletedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been updated or completed downloading from network\n   * storage (iCloud on iOS).\n   */\n  updatedAssets?: Asset[];\n};\n\n// @docsMissing\nexport type Location = {\n  latitude: number;\n  longitude: number;\n};\n\n// @needsAudit\nexport type Album = {\n  /**\n   * Album ID.\n   */\n  id: string;\n  /**\n   * Album title.\n   */\n  title: string;\n  /**\n   * Estimated number of assets in the album.\n   */\n  assetCount: number;\n  /**\n   * The type of the assets album.\n   * @platform ios\n   */\n  type?: AlbumType;\n  /**\n   * Apply only to albums whose type is `'moment'`. Earliest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  startTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Latest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  endTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Approximated location of all\n   * assets in the moment.\n   * @platform ios\n   */\n  approximateLocation?: Location;\n  /**\n   * Apply only to albums whose type is `'moment'`. Names of locations grouped\n   * in the moment.\n   * @platform ios\n   */\n  locationNames?: string[];\n};\n\n// @docsMissing\nexport type AlbumType = 'album' | 'moment' | 'smartAlbum';\n\n// @docsMissing\nexport type AlbumsOptions = {\n  includeSmartAlbums?: boolean;\n};\n\n// @needsAudit\nexport type AssetsOptions = {\n  /**\n   * The maximum number of items on a single page.\n   * @default 20\n   */\n  first?: number;\n  /**\n   * Asset ID of the last item returned on the previous page.\n   */\n  after?: AssetRef;\n  /**\n   * [Album](#album) or its ID to get assets from specific album.\n   */\n  album?: AlbumRef;\n  /**\n   * An array of [`SortByValue`](#sortbyvalue)s or a single `SortByValue` value. By default, all\n   * keys are sorted in descending order, however you can also pass a pair `[key, ascending]` where\n   * the second item is a `boolean` value that means whether to use ascending order. Note that if\n   * the `SortBy.default` key is used, then `ascending` argument will not matter. Earlier items have\n   * higher priority when sorting out the results.\n   * If empty, this method will use the default sorting that is provided by the platform.\n   */\n  sortBy?: SortByValue[] | SortByValue;\n  /**\n   * An array of [MediaTypeValue](#expomedialibrarymediatypevalue)s or a single `MediaTypeValue`.\n   * @default MediaType.photo\n   */\n  mediaType?: MediaTypeValue[] | MediaTypeValue;\n  /**\n   * `Date` object or Unix timestamp in milliseconds limiting returned assets only to those that\n   * were created after this date.\n   */\n  createdAfter?: Date | number;\n  /**\n   * Similarly as `createdAfter`, but limits assets only to those that were created before specified\n   * date.\n   */\n  createdBefore?: Date | number;\n};\n\n// @needsAudit\nexport type PagedInfo<T> = {\n  /**\n   * A page of [`Asset`](#asset)s fetched by the query.\n   */\n  assets: T[];\n  /**\n   * ID of the last fetched asset. It should be passed as `after` option in order to get the\n   * next page.\n   */\n  endCursor: string;\n  /**\n   * Whether there are more assets to fetch.\n   */\n  hasNextPage: boolean;\n  /**\n   * Estimated total number of assets that match the query.\n   */\n  totalCount: number;\n};\n\n// @docsMissing\nexport type AssetRef = Asset | string;\n\n// @docsMissing\nexport type AlbumRef = Album | string;\n\nexport {\n  PermissionStatus,\n  PermissionExpiration,\n  EXPermissionResponse,\n  PermissionHookOptions,\n  Subscription,\n};\n\nfunction arrayize(item: any): any[] {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref: any): string | undefined {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds: any): void {\n  if (assetIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds: any): void {\n  if (albumIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType: any): void {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy: any): void {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy: any): void {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\nfunction sortByOptionToString(sortBy: any) {\n  if (Array.isArray(sortBy)) {\n    return `${sortBy[0]} ${sortBy[1] ? 'ASC' : 'DESC'}`;\n  }\n  return `${sortBy} DESC`;\n}\n\nfunction dateToNumber(value?: Date | number): number | undefined {\n  return value instanceof Date ? value.getTime() : value;\n}\n\n// @needsAudit\n/**\n * Possible media types.\n */\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\n\n// @needsAudit\n/**\n * Supported keys that can be used to sort `getAssetsAsync` results.\n */\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\n// @needsAudit\n/**\n * Returns whether the Media Library API is enabled on the current device.\n * @return A promise which fulfils with a `boolean`, indicating whether the Media Library API is\n * available on the current device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!MediaLibrary && 'getAssetsAsync' in MediaLibrary;\n}\n\n// @needsAudit @docsMissing\n/**\n * Asks the user to grant permissions for accessing media in user's media library.\n * @param writeOnly\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function requestPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<PermissionResponse> {\n  if (!MediaLibrary.requestPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n  }\n  return await MediaLibrary.requestPermissionsAsync(writeOnly);\n}\n\n// @needsAudit @docsMissing\n/**\n * Checks user's permissions for accessing media library.\n * @param writeOnly\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function getPermissionsAsync(writeOnly: boolean = false): Promise<PermissionResponse> {\n  if (!MediaLibrary.getPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n  }\n  return await MediaLibrary.getPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<PermissionResponse, { writeOnly?: boolean }>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * __Available only on iOS >= 14.__ Allows the user to update the assets that your app has access to.\n * The system modal is only displayed if the user originally allowed only `limited` access to their\n * media library, otherwise this method is a no-op.\n * @return A promise that either rejects if the method is unavailable (meaning the device is not\n * running iOS >= 14), or resolves to `void`.\n * > __Note:__ This method doesn't inform you if the user changes which assets your app has access to.\n * For that information, you need to subscribe for updates to the user's media library using [addListener(listener)](#medialibraryaddlistenerlistener).\n * If `hasIncrementalChanges` is `false`, the user changed their permissions.\n */\nexport async function presentPermissionsPickerAsync(): Promise<void> {\n  if (!MediaLibrary.presentPermissionsPickerAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n  }\n  return await MediaLibrary.presentPermissionsPickerAsync();\n}\n\n// @needsAudit\n/**\n * Creates an asset from existing file. The most common use case is to save a picture taken by [Camera](./camera).\n * This method requires `CAMERA_ROLL` permission.\n *\n * @example\n * ```js\n * const { uri } = await Camera.takePictureAsync();\n * const asset = await MediaLibrary.createAssetAsync(uri);\n * ```\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`\n * @return A promise which fulfils with an object representing an [`Asset`](#asset).\n */\nexport async function createAssetAsync(localUri: string): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\n// @needsAudit\n/**\n * Saves the file at given `localUri` to the user's media library. Unlike [`createAssetAsync()`](#medialibrarycreateassetasynclocaluri),\n * This method doesn't return created asset.\n * On __iOS 11+__, it's possible to use this method without asking for `CAMERA_ROLL` permission,\n * however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`.\n */\nexport async function saveToLibraryAsync(localUri: string): Promise<void> {\n  if (!MediaLibrary.saveToLibraryAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n  }\n  return await MediaLibrary.saveToLibraryAsync(localUri);\n}\n\n// @needsAudit\n/**\n * Adds array of assets to the album.\n *\n * On Android, by default it copies assets from the current album to provided one, however it's also\n * possible to move them by passing `false` as `copyAssets` argument.In case they're copied you\n * should keep in mind that `getAssetsAsync` will return duplicated assets.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @param copy __Android only.__ Whether to copy assets to the new album instead of move them.\n * Defaults to `true`.\n * @return Returns promise which fulfils with `true` if the assets were successfully added to\n * the album.\n */\nexport async function addAssetsToAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n): Promise<boolean> {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\n// @needsAudit\n/**\n * Removes given assets from album.\n *\n * On Android, album will be automatically deleted if there are no more assets inside.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @return Returns promise which fulfils with `true` if the assets were successfully removed from\n * the album.\n */\nexport async function removeAssetsFromAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef\n): Promise<boolean> {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\n// @needsAudit\n/**\n * Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while\n * on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is\n * additional dialog on iOS that requires user to confirm this action.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @return Returns promise which fulfils with `true` if the assets were successfully deleted.\n */\nexport async function deleteAssetsAsync(assets: AssetRef[] | AssetRef): Promise<boolean> {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\n// @needsAudit\n/**\n * Provides more information about an asset, including GPS location, local URI and EXIF metadata.\n * @param asset An [Asset](#asset) or its ID.\n * @param options\n * @return An [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.\n */\nexport async function getAssetInfoAsync(\n  asset: AssetRef,\n  options: MediaLibraryAssetInfoQueryOptions = { shouldDownloadFromNetwork: true }\n): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId, options);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\n// @needsAudit\n/**\n * Queries for user-created albums in media gallery.\n * @return A promise which fulfils with an array of [`Album`](#asset)s. Depending on Android version,\n * root directory of your storage may be listed as album titled `\"0\"` or unlisted at all.\n */\nexport async function getAlbumsAsync({ includeSmartAlbums = false }: AlbumsOptions = {}): Promise<\n  Album[]\n> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return await MediaLibrary.getAlbumsAsync({ includeSmartAlbums });\n}\n\n// @needsAudit\n/**\n * Queries for an album with a specific name.\n * @param title Name of the album to look for.\n * @return An object representing an [`Album`](#album), if album with given name exists, otherwise\n * returns `null`.\n */\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return await MediaLibrary.getAlbumAsync(title);\n}\n\n// @needsAudit\n/**\n * Creates an album with given name and initial asset. The asset parameter is required on Android,\n * since it's not possible to create empty album on this platform. On Android, by default it copies\n * given asset from the current album to the new one, however it's also possible to move it by\n * passing `false` as `copyAsset` argument.\n * In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.\n * @param albumName Name of the album to create.\n * @param asset An [Asset](#asset) or its ID (required on Android).\n * @param copyAsset __Android Only.__ Whether to copy asset to the new album instead of move it.\n * Defaults to `true`.\n * @return Newly created [`Album`](#album).\n */\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset: boolean = true\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.createAlbumAsync(albumName, assetId);\n  }\n  return await MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n}\n\n// @needsAudit\n/**\n * Deletes given albums from the library. On Android by default it deletes assets belonging to given\n * albums from the library. On iOS it doesn't delete these assets, however it's possible to do by\n * passing `true` as `deleteAssets`.\n * @param albums An array of [`Album`](#asset)s or their IDs.\n * @param assetRemove __iOS Only.__ Whether to also delete assets belonging to given albums.\n * Defaults to `false`.\n * @return Returns a promise which fulfils with `true` if the albums were successfully deleted from\n * the library.\n */\nexport async function deleteAlbumsAsync(\n  albums: AlbumRef[] | AlbumRef,\n  assetRemove: boolean = false\n): Promise<boolean> {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return await MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\n// @needsAudit\n/**\n * Fetches a page of assets matching the provided criteria.\n * @param assetsOptions\n * @return A promise that fulfils with to [`PagedInfo`](#pagedinfo) object with array of [`Asset`](#asset)s.\n */\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType, createdAfter, createdBefore } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n    createdAfter: dateToNumber(createdAfter),\n    createdBefore: dateToNumber(createdBefore),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n\n  if (after != null && Platform.OS === 'android' && isNaN(parseInt(getId(after) as string, 10))) {\n    throw new Error('Option \"after\" must be a valid ID!');\n  }\n\n  if (first != null && first < 0) {\n    throw new Error('Option \"first\" must be a positive integer!');\n  }\n\n  options.sortBy.forEach(checkSortBy);\n  options.mediaType.forEach(checkMediaType);\n  options.sortBy = options.sortBy.map(sortByOptionToString);\n\n  return await MediaLibrary.getAssetsAsync(options);\n}\n\n// @needsAudit\n/**\n * Subscribes for updates in user's media library.\n * @param listener A callback that is fired when any assets have been inserted or deleted from the\n * library, or when the user changes which assets they're allowing access to. On Android it's\n * invoked with an empty object. On iOS it's invoked with [`MediaLibraryAssetsChangeEvent`](#medialibraryassetschangeevent)\n * object.\n * @return An [`Subscription`](#subscription) object that you can call `remove()` on when you would\n * like to unsubscribe the listener.\n */\nexport function addListener(\n  listener: (event: MediaLibraryAssetsChangeEvent) => void\n): Subscription {\n  return eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n}\n\n// @docsMissing\nexport function removeSubscription(subscription: Subscription): void {\n  subscription.remove();\n}\n\n// @needsAudit\n/**\n * Removes all listeners.\n */\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\n\n// @needsAudit\n/**\n * Fetches a list of moments, which is a group of assets taken around the same place\n * and time.\n * @return An array of [albums](#album) whose type is `moment`.\n * @platform ios\n */\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return await MediaLibrary.getMomentsAsync();\n}\n\n// @needsAudit\n/**\n * Moves album content to the special media directories on **Android R** or **above** if needed.\n * Those new locations are in line with the Android `scoped storage` - so your application won't\n * lose write permission to those directories in the future.\n *\n * This method does nothing if:\n * - app is running on **iOS**, **web** or **Android below R**\n * - app has **write permission** to the album folder\n *\n * The migration is possible when the album contains only compatible files types.\n * For instance, movies and pictures are compatible with each other, but music and pictures are not.\n * If automatic migration isn't possible, the function will be rejected.\n * In that case, you can use methods from the `expo-file-system` to migrate all your files manually.\n *\n * # Why do you need to migrate files?\n * __Android R__ introduced a lot of changes in the storage system. Now applications can't save\n * anything to the root directory. The only available locations are from the `MediaStore` API.\n * Unfortunately, the media library stored albums in folders for which, because of those changes,\n * the application doesn't have permissions anymore. However, it doesn't mean you need to migrate\n * all your albums. If your application doesn't add assets to albums, you don't have to migrate.\n * Everything will work as it used to. You can read more about scoped storage in [the Android documentation](https://developer.android.com/about/versions/11/privacy/storage).\n *\n * @param album An [Album](#album) or its ID.\n * @return A promise which fulfils to `void`.\n */\nexport async function migrateAlbumIfNeededAsync(album: AlbumRef): Promise<void> {\n  if (!MediaLibrary.migrateAlbumIfNeededAsync) {\n    return;\n  }\n\n  return await MediaLibrary.migrateAlbumIfNeededAsync(getId(album));\n}\n\n// @needsAudit\n/**\n * Checks if the album should be migrated to a different location. In other words, it checks if the\n * application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.\n * > Note: For **Android below R**, **web** or **iOS**, this function always returns `false`.\n * @param album An [Album](#album) or its ID.\n * @return Returns a promise which fulfils with `true` if the album should be migrated.\n */\nexport async function albumNeedsMigrationAsync(album: AlbumRef): Promise<boolean> {\n  if (!MediaLibrary.albumNeedsMigrationAsync) {\n    return false;\n  }\n\n  return await MediaLibrary.albumNeedsMigrationAsync(getId(album));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}