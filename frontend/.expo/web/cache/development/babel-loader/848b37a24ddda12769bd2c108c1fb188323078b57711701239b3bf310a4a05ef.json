{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nfunction chunkArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var size = arguments.length > 1 ? arguments[1] : undefined;\n  if (array === []) return [];\n  return array.reduce(function (acc, val) {\n    if (acc.length === 0) acc.push([]);\n    var last = acc[acc.length - 1];\n    if (last.length < size) {\n      last.push(val);\n    } else {\n      acc.push([val]);\n    }\n    return acc;\n  }, []);\n}\nfunction calculateDimensions(_ref) {\n  var itemDimension = _ref.itemDimension,\n    staticDimension = _ref.staticDimension,\n    totalDimension = _ref.totalDimension,\n    fixed = _ref.fixed,\n    spacing = _ref.spacing,\n    maxItemsPerRow = _ref.maxItemsPerRow;\n  var usableTotalDimension = staticDimension || totalDimension;\n  var availableDimension = usableTotalDimension - spacing;\n  var itemTotalDimension = Math.min(itemDimension + spacing, availableDimension);\n  var itemsPerRow = Math.min(Math.floor(availableDimension / itemTotalDimension), maxItemsPerRow || Infinity);\n  var containerDimension = availableDimension / itemsPerRow;\n  var fixedSpacing;\n  if (fixed) {\n    fixedSpacing = (totalDimension - itemDimension * itemsPerRow) / (itemsPerRow + 1);\n  }\n  return {\n    itemTotalDimension: itemTotalDimension,\n    availableDimension: availableDimension,\n    itemsPerRow: itemsPerRow,\n    containerDimension: containerDimension,\n    fixedSpacing: fixedSpacing\n  };\n}\nfunction getStyleDimensions(style) {\n  var horizontal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var space1 = 0;\n  var space2 = 0;\n  var maxStyleDimension = undefined;\n  if (style) {\n    var flatStyle = Array.isArray(style) ? StyleSheet.flatten(style) : style;\n    var sMaxDimensionXY = 'maxWidth';\n    var sPaddingXY = 'paddingHorizontal';\n    var sPadding1 = 'paddingLeft';\n    var sPadding2 = 'paddingRight';\n    if (horizontal) {\n      sMaxDimensionXY = 'maxHeight';\n      sPaddingXY = 'paddingVertical';\n      sPadding1 = 'paddingTop';\n      sPadding2 = 'paddingBottom';\n    }\n    if (flatStyle[sMaxDimensionXY] && typeof flatStyle[sMaxDimensionXY] === 'number') {\n      maxStyleDimension = flatStyle[sMaxDimensionXY];\n    }\n    var padding = flatStyle[sPaddingXY] || flatStyle.padding;\n    var padding1 = flatStyle[sPadding1] || padding || 0;\n    var padding2 = flatStyle[sPadding2] || padding || 0;\n    space1 = typeof padding1 === 'number' ? padding1 : 0;\n    space2 = typeof padding2 === 'number' ? padding2 : 0;\n  }\n  return {\n    space1: space1,\n    space2: space2,\n    maxStyleDimension: maxStyleDimension\n  };\n}\nfunction getAdjustedTotalDimensions(_ref2) {\n  var totalDimension = _ref2.totalDimension,\n    maxDimension = _ref2.maxDimension,\n    contentContainerStyle = _ref2.contentContainerStyle,\n    style = _ref2.style,\n    _ref2$horizontal = _ref2.horizontal,\n    horizontal = _ref2$horizontal === void 0 ? false : _ref2$horizontal,\n    _ref2$adjustGridToSty = _ref2.adjustGridToStyles,\n    adjustGridToStyles = _ref2$adjustGridToSty === void 0 ? false : _ref2$adjustGridToSty;\n  var componentDimension = totalDimension;\n  var actualMaxDimension = totalDimension;\n  if (maxDimension && totalDimension > maxDimension) {\n    actualMaxDimension = maxDimension;\n    totalDimension = maxDimension;\n  }\n  if (adjustGridToStyles) {\n    if (contentContainerStyle) {\n      var _getStyleDimensions = getStyleDimensions(contentContainerStyle, horizontal),\n        space1 = _getStyleDimensions.space1,\n        space2 = _getStyleDimensions.space2,\n        maxStyleDimension = _getStyleDimensions.maxStyleDimension;\n      if (maxStyleDimension && totalDimension > maxStyleDimension) {\n        actualMaxDimension = maxStyleDimension;\n        totalDimension = maxStyleDimension;\n      }\n      if (space1 || space2) {\n        totalDimension = totalDimension - space1 - space2;\n      }\n    }\n    if (style) {\n      var edgeSpaceDiff = (componentDimension - actualMaxDimension) / 2;\n      var _getStyleDimensions2 = getStyleDimensions(style, horizontal),\n        _space = _getStyleDimensions2.space1,\n        _space2 = _getStyleDimensions2.space2;\n      if (_space > edgeSpaceDiff) {\n        totalDimension = totalDimension - (_space - edgeSpaceDiff);\n      }\n      if (_space2 > edgeSpaceDiff) {\n        totalDimension = totalDimension - (_space2 - edgeSpaceDiff);\n      }\n    }\n  }\n  return totalDimension;\n}\nfunction generateStyles(_ref3) {\n  var itemDimension = _ref3.itemDimension,\n    containerDimension = _ref3.containerDimension,\n    spacing = _ref3.spacing,\n    fixed = _ref3.fixed,\n    horizontal = _ref3.horizontal,\n    fixedSpacing = _ref3.fixedSpacing;\n  var rowStyle = {\n    flexDirection: 'row',\n    paddingLeft: fixed ? fixedSpacing : spacing,\n    paddingBottom: spacing\n  };\n  var containerStyle = {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: fixed ? itemDimension : containerDimension - spacing,\n    marginRight: fixed ? fixedSpacing : spacing\n  };\n  if (horizontal) {\n    rowStyle = {\n      flexDirection: 'column',\n      paddingTop: fixed ? fixedSpacing : spacing,\n      paddingRight: spacing\n    };\n    containerStyle = {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      height: fixed ? itemDimension : containerDimension - spacing,\n      marginBottom: fixed ? fixedSpacing : spacing\n    };\n  }\n  return {\n    containerStyle: containerStyle,\n    rowStyle: rowStyle\n  };\n}\nexport { chunkArray, calculateDimensions, generateStyles, getAdjustedTotalDimensions };","map":{"version":3,"names":["chunkArray","array","arguments","length","undefined","size","reduce","acc","val","push","last","calculateDimensions","_ref","itemDimension","staticDimension","totalDimension","fixed","spacing","maxItemsPerRow","usableTotalDimension","availableDimension","itemTotalDimension","Math","min","itemsPerRow","floor","Infinity","containerDimension","fixedSpacing","getStyleDimensions","style","horizontal","space1","space2","maxStyleDimension","flatStyle","Array","isArray","StyleSheet","flatten","sMaxDimensionXY","sPaddingXY","sPadding1","sPadding2","padding","padding1","padding2","getAdjustedTotalDimensions","_ref2","maxDimension","contentContainerStyle","_ref2$horizontal","_ref2$adjustGridToSty","adjustGridToStyles","componentDimension","actualMaxDimension","_getStyleDimensions","edgeSpaceDiff","_getStyleDimensions2","generateStyles","_ref3","rowStyle","flexDirection","paddingLeft","paddingBottom","containerStyle","justifyContent","width","marginRight","paddingTop","paddingRight","height","marginBottom"],"sources":["C:/Users/Beytullah/Documents/GitHub/DentAI/frontend/node_modules/react-native-super-grid/utils.js"],"sourcesContent":["import { StyleSheet } from 'react-native';\n\nfunction chunkArray(array = [], size) {\n  if (array === []) return [];\n  return array.reduce((acc, val) => {\n    if (acc.length === 0) acc.push([]);\n    const last = acc[acc.length - 1];\n    if (last.length < size) {\n      last.push(val);\n    } else {\n      acc.push([val]);\n    }\n    return acc;\n  }, []);\n}\n\nfunction calculateDimensions({\n  itemDimension,\n  staticDimension,\n  totalDimension,\n  fixed,\n  spacing,\n  maxItemsPerRow,\n}) {\n  const usableTotalDimension = staticDimension || totalDimension;\n  const availableDimension = usableTotalDimension - spacing; // One spacing extra\n  const itemTotalDimension = Math.min(itemDimension + spacing, availableDimension); // itemTotalDimension should not exceed availableDimension\n  const itemsPerRow = Math.min(Math.floor(availableDimension / itemTotalDimension), maxItemsPerRow || Infinity);\n  const containerDimension = availableDimension / itemsPerRow;\n\n  let fixedSpacing;\n  if (fixed) {\n    fixedSpacing = (totalDimension - (itemDimension * itemsPerRow)) / (itemsPerRow + 1);\n  }\n\n  return {\n    itemTotalDimension,\n    availableDimension,\n    itemsPerRow,\n    containerDimension,\n    fixedSpacing,\n  };\n}\n\nfunction getStyleDimensions(\n  style,\n  horizontal = false,\n) {\n  let space1 = 0;\n  let space2 = 0;\n  let maxStyleDimension = undefined;\n  if (style) {\n    const flatStyle = Array.isArray(style) ? StyleSheet.flatten(style) : style;\n    let sMaxDimensionXY = 'maxWidth';\n    let sPaddingXY = 'paddingHorizontal';\n    let sPadding1 = 'paddingLeft';\n    let sPadding2 = 'paddingRight';\n    if (horizontal) {\n      sMaxDimensionXY = 'maxHeight';\n      sPaddingXY = 'paddingVertical';\n      sPadding1 = 'paddingTop';\n      sPadding2 = 'paddingBottom';\n    }\n\n    if (flatStyle[sMaxDimensionXY] && typeof flatStyle[sMaxDimensionXY] === 'number') {\n      maxStyleDimension = flatStyle[sMaxDimensionXY];\n    }\n\n    const padding = flatStyle[sPaddingXY] || flatStyle.padding;\n    const padding1 = flatStyle[sPadding1] || padding || 0;\n    const padding2 = flatStyle[sPadding2] || padding || 0;\n    space1 = (typeof padding1 === 'number' ? padding1 : 0);\n    space2 = (typeof padding2 === 'number' ? padding2 : 0);\n  }\n  return { space1, space2, maxStyleDimension };\n}\n\nfunction getAdjustedTotalDimensions({\n  totalDimension,\n  maxDimension,\n  contentContainerStyle,\n  style,\n  horizontal = false,\n  adjustGridToStyles = false,\n}) {\n  const componentDimension = totalDimension; // keep track of initial max of component/screen\n  let actualMaxDimension = totalDimension; // keep track of smallest max dimension\n\n  // adjust for maxDimension prop\n  if (maxDimension && totalDimension > maxDimension) {\n    actualMaxDimension = maxDimension;\n    totalDimension = maxDimension;\n  }\n  \n  if (adjustGridToStyles) {\n    if (contentContainerStyle) {\n      const { space1, space2, maxStyleDimension } = getStyleDimensions(contentContainerStyle, horizontal);\n      // adjust for maxWidth or maxHeight in contentContainerStyle\n      if (maxStyleDimension && totalDimension > maxStyleDimension) {\n        actualMaxDimension = maxStyleDimension;\n        totalDimension = maxStyleDimension;\n      }\n      // subtract horizontal or vertical padding from totalDimension\n      if (space1 || space2) {\n        totalDimension = totalDimension - space1 - space2;\n      }\n    }\n\n    if (style) {\n      const edgeSpaceDiff = (componentDimension - actualMaxDimension) / 2; // if content is floating in middle of screen get margin on either side\n      const { space1, space2 } = getStyleDimensions(style, horizontal);\n      // only subtract if space is greater than the margin on either side\n      if (space1 > edgeSpaceDiff) {\n        totalDimension = totalDimension - (space1 - edgeSpaceDiff); // subtract the padding minus any remaining margin\n      }\n      if (space2 > edgeSpaceDiff) {\n        totalDimension = totalDimension - (space2 - edgeSpaceDiff); // subtract the padding minus any remaining margin\n      }\n    }\n  }\n\n  return totalDimension;\n}\n\nfunction generateStyles({\n  itemDimension,\n  containerDimension,\n  spacing,\n  fixed,\n  horizontal,\n  fixedSpacing,\n}) {\n  let rowStyle = {\n    flexDirection: 'row',\n    paddingLeft: fixed ? fixedSpacing : spacing,\n    paddingBottom: spacing,\n  };\n\n  let containerStyle = {\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: fixed ? itemDimension : (containerDimension - spacing),\n    marginRight: fixed ? fixedSpacing : spacing,\n  };\n\n  if (horizontal) {\n    rowStyle = {\n      flexDirection: 'column',\n      paddingTop: fixed ? fixedSpacing : spacing,\n      paddingRight: spacing,\n    };\n\n    containerStyle = {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      height: fixed ? itemDimension : (containerDimension - spacing),\n      marginBottom: fixed ? fixedSpacing : spacing,\n    };\n  }\n\n  return {\n    containerStyle,\n    rowStyle,\n  };\n}\n\nexport { chunkArray, calculateDimensions, generateStyles, getAdjustedTotalDimensions };\n"],"mappings":";AAEA,SAASA,UAAUA,CAAA,EAAmB;EAAA,IAAlBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClC,IAAIH,KAAK,KAAK,EAAE,EAAE,OAAO,EAAE;EAC3B,OAAOA,KAAK,CAACK,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAK;IAChC,IAAID,GAAG,CAACJ,MAAM,KAAK,CAAC,EAAEI,GAAG,CAACE,IAAI,CAAC,EAAE,CAAC;IAClC,IAAMC,IAAI,GAAGH,GAAG,CAACA,GAAG,CAACJ,MAAM,GAAG,CAAC,CAAC;IAChC,IAAIO,IAAI,CAACP,MAAM,GAAGE,IAAI,EAAE;MACtBK,IAAI,CAACD,IAAI,CAACD,GAAG,CAAC;IAChB,CAAC,MAAM;MACLD,GAAG,CAACE,IAAI,CAAC,CAACD,GAAG,CAAC,CAAC;IACjB;IACA,OAAOD,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC;AACR;AAEA,SAASI,mBAAmBA,CAAAC,IAAA,EAOzB;EAAA,IANDC,aAAa,GAAAD,IAAA,CAAbC,aAAa;IACbC,eAAe,GAAAF,IAAA,CAAfE,eAAe;IACfC,cAAc,GAAAH,IAAA,CAAdG,cAAc;IACdC,KAAK,GAAAJ,IAAA,CAALI,KAAK;IACLC,OAAO,GAAAL,IAAA,CAAPK,OAAO;IACPC,cAAc,GAAAN,IAAA,CAAdM,cAAc;EAEd,IAAMC,oBAAoB,GAAGL,eAAe,IAAIC,cAAc;EAC9D,IAAMK,kBAAkB,GAAGD,oBAAoB,GAAGF,OAAO;EACzD,IAAMI,kBAAkB,GAAGC,IAAI,CAACC,GAAG,CAACV,aAAa,GAAGI,OAAO,EAAEG,kBAAkB,CAAC;EAChF,IAAMI,WAAW,GAAGF,IAAI,CAACC,GAAG,CAACD,IAAI,CAACG,KAAK,CAACL,kBAAkB,GAAGC,kBAAkB,CAAC,EAAEH,cAAc,IAAIQ,QAAQ,CAAC;EAC7G,IAAMC,kBAAkB,GAAGP,kBAAkB,GAAGI,WAAW;EAE3D,IAAII,YAAY;EAChB,IAAIZ,KAAK,EAAE;IACTY,YAAY,GAAG,CAACb,cAAc,GAAIF,aAAa,GAAGW,WAAY,KAAKA,WAAW,GAAG,CAAC,CAAC;EACrF;EAEA,OAAO;IACLH,kBAAkB,EAAlBA,kBAAkB;IAClBD,kBAAkB,EAAlBA,kBAAkB;IAClBI,WAAW,EAAXA,WAAW;IACXG,kBAAkB,EAAlBA,kBAAkB;IAClBC,YAAY,EAAZA;EACF,CAAC;AACH;AAEA,SAASC,kBAAkBA,CACzBC,KAAK,EAEL;EAAA,IADAC,UAAU,GAAA7B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAElB,IAAI8B,MAAM,GAAG,CAAC;EACd,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,iBAAiB,GAAG9B,SAAS;EACjC,IAAI0B,KAAK,EAAE;IACT,IAAMK,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,GAAGQ,UAAU,CAACC,OAAO,CAACT,KAAK,CAAC,GAAGA,KAAK;IAC1E,IAAIU,eAAe,GAAG,UAAU;IAChC,IAAIC,UAAU,GAAG,mBAAmB;IACpC,IAAIC,SAAS,GAAG,aAAa;IAC7B,IAAIC,SAAS,GAAG,cAAc;IAC9B,IAAIZ,UAAU,EAAE;MACdS,eAAe,GAAG,WAAW;MAC7BC,UAAU,GAAG,iBAAiB;MAC9BC,SAAS,GAAG,YAAY;MACxBC,SAAS,GAAG,eAAe;IAC7B;IAEA,IAAIR,SAAS,CAACK,eAAe,CAAC,IAAI,OAAOL,SAAS,CAACK,eAAe,CAAC,KAAK,QAAQ,EAAE;MAChFN,iBAAiB,GAAGC,SAAS,CAACK,eAAe,CAAC;IAChD;IAEA,IAAMI,OAAO,GAAGT,SAAS,CAACM,UAAU,CAAC,IAAIN,SAAS,CAACS,OAAO;IAC1D,IAAMC,QAAQ,GAAGV,SAAS,CAACO,SAAS,CAAC,IAAIE,OAAO,IAAI,CAAC;IACrD,IAAME,QAAQ,GAAGX,SAAS,CAACQ,SAAS,CAAC,IAAIC,OAAO,IAAI,CAAC;IACrDZ,MAAM,GAAI,OAAOa,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAG,CAAE;IACtDZ,MAAM,GAAI,OAAOa,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAG,CAAE;EACxD;EACA,OAAO;IAAEd,MAAM,EAANA,MAAM;IAAEC,MAAM,EAANA,MAAM;IAAEC,iBAAiB,EAAjBA;EAAkB,CAAC;AAC9C;AAEA,SAASa,0BAA0BA,CAAAC,KAAA,EAOhC;EAAA,IANDjC,cAAc,GAAAiC,KAAA,CAAdjC,cAAc;IACdkC,YAAY,GAAAD,KAAA,CAAZC,YAAY;IACZC,qBAAqB,GAAAF,KAAA,CAArBE,qBAAqB;IACrBpB,KAAK,GAAAkB,KAAA,CAALlB,KAAK;IAAAqB,gBAAA,GAAAH,KAAA,CACLjB,UAAU;IAAVA,UAAU,GAAAoB,gBAAA,cAAG,KAAK,GAAAA,gBAAA;IAAAC,qBAAA,GAAAJ,KAAA,CAClBK,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;EAE1B,IAAME,kBAAkB,GAAGvC,cAAc;EACzC,IAAIwC,kBAAkB,GAAGxC,cAAc;EAGvC,IAAIkC,YAAY,IAAIlC,cAAc,GAAGkC,YAAY,EAAE;IACjDM,kBAAkB,GAAGN,YAAY;IACjClC,cAAc,GAAGkC,YAAY;EAC/B;EAEA,IAAII,kBAAkB,EAAE;IACtB,IAAIH,qBAAqB,EAAE;MACzB,IAAAM,mBAAA,GAA8C3B,kBAAkB,CAACqB,qBAAqB,EAAEnB,UAAU,CAAC;QAA3FC,MAAM,GAAAwB,mBAAA,CAANxB,MAAM;QAAEC,MAAM,GAAAuB,mBAAA,CAANvB,MAAM;QAAEC,iBAAiB,GAAAsB,mBAAA,CAAjBtB,iBAAiB;MAEzC,IAAIA,iBAAiB,IAAInB,cAAc,GAAGmB,iBAAiB,EAAE;QAC3DqB,kBAAkB,GAAGrB,iBAAiB;QACtCnB,cAAc,GAAGmB,iBAAiB;MACpC;MAEA,IAAIF,MAAM,IAAIC,MAAM,EAAE;QACpBlB,cAAc,GAAGA,cAAc,GAAGiB,MAAM,GAAGC,MAAM;MACnD;IACF;IAEA,IAAIH,KAAK,EAAE;MACT,IAAM2B,aAAa,GAAG,CAACH,kBAAkB,GAAGC,kBAAkB,IAAI,CAAC;MACnE,IAAAG,oBAAA,GAA2B7B,kBAAkB,CAACC,KAAK,EAAEC,UAAU,CAAC;QAAxDC,MAAM,GAAA0B,oBAAA,CAAN1B,MAAM;QAAEC,OAAM,GAAAyB,oBAAA,CAANzB,MAAM;MAEtB,IAAID,MAAM,GAAGyB,aAAa,EAAE;QAC1B1C,cAAc,GAAGA,cAAc,IAAIiB,MAAM,GAAGyB,aAAa,CAAC;MAC5D;MACA,IAAIxB,OAAM,GAAGwB,aAAa,EAAE;QAC1B1C,cAAc,GAAGA,cAAc,IAAIkB,OAAM,GAAGwB,aAAa,CAAC;MAC5D;IACF;EACF;EAEA,OAAO1C,cAAc;AACvB;AAEA,SAAS4C,cAAcA,CAAAC,KAAA,EAOpB;EAAA,IAND/C,aAAa,GAAA+C,KAAA,CAAb/C,aAAa;IACbc,kBAAkB,GAAAiC,KAAA,CAAlBjC,kBAAkB;IAClBV,OAAO,GAAA2C,KAAA,CAAP3C,OAAO;IACPD,KAAK,GAAA4C,KAAA,CAAL5C,KAAK;IACLe,UAAU,GAAA6B,KAAA,CAAV7B,UAAU;IACVH,YAAY,GAAAgC,KAAA,CAAZhC,YAAY;EAEZ,IAAIiC,QAAQ,GAAG;IACbC,aAAa,EAAE,KAAK;IACpBC,WAAW,EAAE/C,KAAK,GAAGY,YAAY,GAAGX,OAAO;IAC3C+C,aAAa,EAAE/C;EACjB,CAAC;EAED,IAAIgD,cAAc,GAAG;IACnBH,aAAa,EAAE,QAAQ;IACvBI,cAAc,EAAE,QAAQ;IACxBC,KAAK,EAAEnD,KAAK,GAAGH,aAAa,GAAIc,kBAAkB,GAAGV,OAAQ;IAC7DmD,WAAW,EAAEpD,KAAK,GAAGY,YAAY,GAAGX;EACtC,CAAC;EAED,IAAIc,UAAU,EAAE;IACd8B,QAAQ,GAAG;MACTC,aAAa,EAAE,QAAQ;MACvBO,UAAU,EAAErD,KAAK,GAAGY,YAAY,GAAGX,OAAO;MAC1CqD,YAAY,EAAErD;IAChB,CAAC;IAEDgD,cAAc,GAAG;MACfH,aAAa,EAAE,KAAK;MACpBI,cAAc,EAAE,QAAQ;MACxBK,MAAM,EAAEvD,KAAK,GAAGH,aAAa,GAAIc,kBAAkB,GAAGV,OAAQ;MAC9DuD,YAAY,EAAExD,KAAK,GAAGY,YAAY,GAAGX;IACvC,CAAC;EACH;EAEA,OAAO;IACLgD,cAAc,EAAdA,cAAc;IACdJ,QAAQ,EAARA;EACF,CAAC;AACH;AAEA,SAAS7D,UAAU,EAAEW,mBAAmB,EAAEgD,cAAc,EAAEZ,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}