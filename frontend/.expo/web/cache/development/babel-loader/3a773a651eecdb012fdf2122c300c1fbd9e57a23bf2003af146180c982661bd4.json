{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport { chunkArray } from \"../utils\";\nvar useRows = function useRows(_ref) {\n  var data = _ref.data,\n    itemsPerRow = _ref.itemsPerRow,\n    invertedRow = _ref.invertedRow,\n    keyExtractor = _ref.keyExtractor,\n    onItemsPerRowChange = _ref.onItemsPerRowChange;\n  var rows = chunkArray(data, itemsPerRow);\n  if (invertedRow) {\n    rows = rows.map(function (r) {\n      return r.reverse();\n    });\n  }\n  var localKeyExtractor = useCallback(function (rowItems, index) {\n    if (keyExtractor) {\n      return rowItems.map(function (rowItem, rowItemIndex) {\n        return keyExtractor(rowItem, rowItemIndex);\n      }).join('_');\n    }\n    return `row_${index}`;\n  }, [keyExtractor]);\n  useEffect(function () {\n    if (onItemsPerRowChange) {\n      onItemsPerRowChange(itemsPerRow);\n    }\n  }, [itemsPerRow]);\n  return {\n    rows: rows,\n    keyExtractor: localKeyExtractor\n  };\n};\nexport default useRows;","map":{"version":3,"names":["useCallback","useEffect","chunkArray","useRows","_ref","data","itemsPerRow","invertedRow","keyExtractor","onItemsPerRowChange","rows","map","r","reverse","localKeyExtractor","rowItems","index","rowItem","rowItemIndex","join"],"sources":["C:/Users/Beytullah/Documents/GitHub/DentAI/frontend/node_modules/react-native-super-grid/hooks/useRows.js"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { chunkArray } from '../utils';\n\n\nconst useRows = ({\n  data, itemsPerRow, invertedRow, keyExtractor, onItemsPerRowChange,\n}) => {\n  let rows = chunkArray(data, itemsPerRow); // Splitting the data into rows\n\n  if (invertedRow) {\n    rows = rows.map(r => r.reverse());\n  }\n\n  const localKeyExtractor = useCallback(\n    (rowItems, index) => {\n      if (keyExtractor) {\n        return rowItems\n          .map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex))\n          .join('_');\n      }\n      return `row_${index}`;\n    },\n    [keyExtractor],\n  );\n\n  useEffect(() => {\n    if (onItemsPerRowChange) {\n      onItemsPerRowChange(itemsPerRow);\n    }\n  }, [itemsPerRow]);\n\n  return { rows, keyExtractor: localKeyExtractor };\n};\n\nexport default useRows;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC9C,SAASC,UAAU;AAGnB,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAAC,IAAA,EAEP;EAAA,IADJC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAAEC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IAAEC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IAAEC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;IAAEC,mBAAmB,GAAAL,IAAA,CAAnBK,mBAAmB;EAEjE,IAAIC,IAAI,GAAGR,UAAU,CAACG,IAAI,EAAEC,WAAW,CAAC;EAExC,IAAIC,WAAW,EAAE;IACfG,IAAI,GAAGA,IAAI,CAACC,GAAG,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,OAAO,CAAC,CAAC;IAAA,EAAC;EACnC;EAEA,IAAMC,iBAAiB,GAAGd,WAAW,CACnC,UAACe,QAAQ,EAAEC,KAAK,EAAK;IACnB,IAAIR,YAAY,EAAE;MAChB,OAAOO,QAAQ,CACZJ,GAAG,CAAC,UAACM,OAAO,EAAEC,YAAY;QAAA,OAAKV,YAAY,CAACS,OAAO,EAAEC,YAAY,CAAC;MAAA,EAAC,CACnEC,IAAI,CAAC,GAAG,CAAC;IACd;IACA,OAAQ,OAAMH,KAAM,EAAC;EACvB,CAAC,EACD,CAACR,YAAY,CACf,CAAC;EAEDP,SAAS,CAAC,YAAM;IACd,IAAIQ,mBAAmB,EAAE;MACvBA,mBAAmB,CAACH,WAAW,CAAC;IAClC;EACF,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,OAAO;IAAEI,IAAI,EAAJA,IAAI;IAAEF,YAAY,EAAEM;EAAkB,CAAC;AAClD,CAAC;AAED,eAAeX,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}