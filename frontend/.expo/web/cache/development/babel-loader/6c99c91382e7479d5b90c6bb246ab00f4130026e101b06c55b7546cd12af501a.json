{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useCallback, useMemo } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { getAdjustedTotalDimensions, calculateDimensions } from \"../utils\";\nvar useDimensions = function useDimensions(props) {\n  var staticDimension = props.staticDimension,\n    maxDimension = props.maxDimension,\n    horizontal = props.horizontal,\n    onLayout = props.onLayout,\n    adjustGridToStyles = props.adjustGridToStyles,\n    contentContainerStyle = props.contentContainerStyle,\n    style = props.style,\n    itemDimension = props.itemDimension,\n    spacing = props.spacing,\n    fixed = props.fixed,\n    maxItemsPerRow = props.maxItemsPerRow;\n  var _useState = useState(function () {\n      var defaultTotalDimension = staticDimension;\n      if (!staticDimension) {\n        var dimension = horizontal ? 'height' : 'width';\n        defaultTotalDimension = getAdjustedTotalDimensions({\n          totalDimension: Dimensions.get('window')[dimension],\n          maxDimension: maxDimension,\n          contentContainerStyle: contentContainerStyle,\n          style: style,\n          horizontal: horizontal,\n          adjustGridToStyles: adjustGridToStyles\n        });\n      }\n      return defaultTotalDimension;\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    totalDimension = _useState2[0],\n    setTotalDimension = _useState2[1];\n  var onLayoutLocal = useCallback(function (e) {\n    if (!staticDimension) {\n      var _ref = e.nativeEvent.layout || {},\n        width = _ref.width,\n        height = _ref.height;\n      var newTotalDimension = horizontal ? height : width;\n      newTotalDimension = getAdjustedTotalDimensions({\n        totalDimension: newTotalDimension,\n        maxDimension: maxDimension,\n        contentContainerStyle: contentContainerStyle,\n        style: style,\n        horizontal: horizontal,\n        adjustGridToStyles: adjustGridToStyles\n      });\n      if (totalDimension !== newTotalDimension && newTotalDimension > 0) {\n        setTotalDimension(newTotalDimension);\n      }\n    }\n    if (onLayout) {\n      onLayout(e);\n    }\n  }, [staticDimension, maxDimension, totalDimension, horizontal, onLayout, adjustGridToStyles]);\n  var _useMemo = useMemo(function () {\n      return calculateDimensions({\n        itemDimension: itemDimension,\n        staticDimension: staticDimension,\n        totalDimension: totalDimension,\n        spacing: spacing,\n        fixed: fixed,\n        maxItemsPerRow: maxItemsPerRow\n      });\n    }, [itemDimension, staticDimension, totalDimension, spacing, fixed, maxItemsPerRow]),\n    containerDimension = _useMemo.containerDimension,\n    itemsPerRow = _useMemo.itemsPerRow,\n    fixedSpacing = _useMemo.fixedSpacing;\n  return {\n    totalDimension: totalDimension,\n    onLayout: onLayoutLocal,\n    containerDimension: containerDimension,\n    itemsPerRow: itemsPerRow,\n    fixedSpacing: fixedSpacing\n  };\n};\nexport default useDimensions;","map":{"version":3,"names":["useState","useCallback","useMemo","Dimensions","getAdjustedTotalDimensions","calculateDimensions","useDimensions","props","staticDimension","maxDimension","horizontal","onLayout","adjustGridToStyles","contentContainerStyle","style","itemDimension","spacing","fixed","maxItemsPerRow","_useState","defaultTotalDimension","dimension","totalDimension","get","_useState2","_slicedToArray","setTotalDimension","onLayoutLocal","e","_ref","nativeEvent","layout","width","height","newTotalDimension","_useMemo","containerDimension","itemsPerRow","fixedSpacing"],"sources":["C:/Users/Beytullah/Documents/GitHub/DentAI/frontend/node_modules/react-native-super-grid/hooks/useDimensions.js"],"sourcesContent":["import { useState, useCallback, useMemo } from 'react';\nimport { Dimensions } from 'react-native';\nimport {\n  getAdjustedTotalDimensions,\n  calculateDimensions,\n} from '../utils';\n\n\nconst useDimensions = (props) => {\n  const {\n    staticDimension,\n    maxDimension,\n    horizontal,\n    onLayout,\n    adjustGridToStyles,\n    contentContainerStyle,\n    style,\n    itemDimension,\n    spacing,\n    fixed,\n    maxItemsPerRow,\n  } = props;\n\n  const [totalDimension, setTotalDimension] = useState(() => {\n    let defaultTotalDimension = staticDimension;\n\n    if (!staticDimension) {\n      const dimension = horizontal ? 'height' : 'width';\n      defaultTotalDimension = getAdjustedTotalDimensions({\n        totalDimension: Dimensions.get('window')[dimension], maxDimension, contentContainerStyle, style, horizontal, adjustGridToStyles,\n      });\n    }\n\n    return defaultTotalDimension;\n  });\n\n  const onLayoutLocal = useCallback(\n    (e) => {\n      if (!staticDimension) {\n        const { width, height } = e.nativeEvent.layout || {};\n        let newTotalDimension = horizontal ? height : width;\n\n        newTotalDimension = getAdjustedTotalDimensions({\n          totalDimension: newTotalDimension, maxDimension, contentContainerStyle, style, horizontal, adjustGridToStyles,\n        });\n\n        if (totalDimension !== newTotalDimension && newTotalDimension > 0) {\n          setTotalDimension(newTotalDimension);\n        }\n      }\n\n      // call onLayout prop if passed\n      if (onLayout) {\n        onLayout(e);\n      }\n    },\n    [staticDimension, maxDimension, totalDimension, horizontal, onLayout, adjustGridToStyles],\n  );\n\n\n  const { containerDimension, itemsPerRow, fixedSpacing } = useMemo(\n    () => calculateDimensions({\n      itemDimension,\n      staticDimension,\n      totalDimension,\n      spacing,\n      fixed,\n      maxItemsPerRow,\n    }),\n    [itemDimension, staticDimension, totalDimension, spacing, fixed, maxItemsPerRow],\n  );\n\n\n  return {\n    totalDimension,\n    onLayout: onLayoutLocal,\n    containerDimension,\n    itemsPerRow,\n    fixedSpacing,\n  };\n};\n\nexport default useDimensions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}