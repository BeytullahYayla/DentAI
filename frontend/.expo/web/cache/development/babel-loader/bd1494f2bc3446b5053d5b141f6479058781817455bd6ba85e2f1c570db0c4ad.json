{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Svg, Rect } from 'react-native-svg';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar width = Dimensions.get(\"window\").width;\nvar height = Dimensions.get(\"window\").height;\nvar HorizontalPercentageBar = function HorizontalPercentageBar(_ref) {\n  var disease = _ref.disease,\n    percentage = _ref.percentage;\n  var barWidth = 5 * width / 6;\n  var barHeight = 33;\n  var filledWidth = barWidth * percentage / 100;\n  var Colors = ['#FF5733', '#33FF57', '#5733FF', '#FFD700', '#00FFFF', '#32CD32', '#FF4500', '#00FA9A', '#FF1493', '#1E90FF', '#FF8C00', '#6A5ACD', '#20B2AA', '#FF69B4', '#8A2BE2', '#3CB371', '#FF6347', '#FF00FF', '#008080', '#800080', '#FFDAB9', '#00FF7F', '#DAA520', '#8B008B', '#2E8B57', '#FFA07A', '#4B0082', '#ADFF2F'];\n  var randomColor = Colors[Math.floor(Math.random() * Colors.length)];\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: {\n        marginLeft: 5\n      },\n      children: _jsx(Text, {\n        style: {\n          fontSize: 18,\n          fontWeight: 'bold'\n        },\n        children: disease\n      })\n    }), _jsxs(View, {\n      style: {\n        marginTop: 5,\n        marginBottom: 5\n      },\n      children: [_jsxs(Svg, {\n        height: barHeight,\n        width: barWidth,\n        children: [_jsx(Rect, {\n          rx: 15,\n          ry: 15,\n          width: barWidth,\n          height: barHeight,\n          fill: \"#e0e0e0\"\n        }), _jsx(Rect, {\n          rx: 15,\n          ry: 15,\n          width: filledWidth,\n          height: barHeight,\n          fill: randomColor\n        })]\n      }), _jsx(View, {\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: _jsxs(Text, {\n          style: {\n            color: 'black',\n            position: 'absolute',\n            left: 10,\n            fontSize: 18,\n            fontWeight: 'bold'\n          },\n          children: [percentage, \"%\"]\n        })\n      })]\n    })]\n  });\n};\nexport default HorizontalPercentageBar;","map":{"version":3,"names":["React","View","Text","Svg","Rect","Dimensions","jsx","_jsx","jsxs","_jsxs","width","get","height","HorizontalPercentageBar","_ref","disease","percentage","barWidth","barHeight","filledWidth","Colors","randomColor","Math","floor","random","length","children","style","marginLeft","fontSize","fontWeight","marginTop","marginBottom","rx","ry","fill","position","top","left","right","bottom","justifyContent","alignItems","color"],"sources":["C:/Users/Beytullah/Documents/GitHub/DentAI/frontend/components/HorizontalPercentageBar.js"],"sourcesContent":["import React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { Svg, Rect } from 'react-native-svg';\r\nimport { Dimensions } from \"react-native\";\r\n\r\nvar width = Dimensions.get(\"window\").width; //full width\r\nvar height = Dimensions.get(\"window\").height; //full height\r\n\r\nconst HorizontalPercentageBar = ({disease, percentage }) => {\r\n    const barWidth = 5 * width / 6; // Çubuk genişliği\r\n    const barHeight = 33; // Çubuk yüksekliği\r\n\r\n    const filledWidth = (barWidth * percentage) / 100;\r\n\r\n    const Colors = [\r\n        '#FF5733', // Turuncu\r\n        '#33FF57', // Yeşil\r\n        '#5733FF', // Mor\r\n        '#FFD700', // Altın Sarısı\r\n        '#00FFFF', // Cam Göbeği\r\n        '#32CD32', // Limon Yeşili\r\n        '#FF4500', // Alev Kırmızısı\r\n        '#00FA9A', // Deniz Yeşili\r\n        '#FF1493', // Derin Pembe\r\n        '#1E90FF', // Orta Mavi\r\n        '#FF8C00', // Koyu Portakal\r\n        '#6A5ACD', // Lavanta\r\n        '#20B2AA', // Açık Deniz Yeşili\r\n        '#FF69B4', // Orkide Pembe\r\n        '#8A2BE2', // Mavi Mor\r\n        '#3CB371', // Deniz Yeşili\r\n        '#FF6347', // Mercan\r\n        '#FF00FF', // Magenta\r\n        '#008080', // Teal\r\n        '#800080', // Purple\r\n        '#FFDAB9', // Peachpuff\r\n        '#00FF7F', // Springgreen\r\n        '#DAA520', // Goldenrod\r\n        '#8B008B', // Darkmagenta\r\n        '#2E8B57', // Seagreen\r\n        '#FFA07A', // Lightsalmon\r\n        '#4B0082', // Indigo\r\n        '#ADFF2F', // Greenyellow\r\n      ];\r\n\r\n    const randomColor = Colors[Math.floor(Math.random() * Colors.length)];\r\n\r\n    return (\r\n        <View>\r\n            <View style={{ marginLeft: 5 }}>\r\n                <Text style={{ fontSize: 18, fontWeight: 'bold' }}>{disease}</Text>\r\n            </View>\r\n            <View style={{ marginTop: 5, marginBottom: 5 }}>\r\n                <Svg height={barHeight} width={barWidth}>\r\n                    <Rect rx={15} ry={15} width={barWidth} height={barHeight} fill=\"#e0e0e0\" />\r\n                    <Rect rx={15} ry={15} width={filledWidth} height={barHeight} fill={randomColor} />\r\n                </Svg>\r\n                <View style={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, justifyContent: 'center', alignItems: 'center' }}>\r\n                    <Text style={{ color: 'black', position: 'absolute', left: 10, fontSize: 18, fontWeight: 'bold' }}>{percentage}%</Text>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default HorizontalPercentageBar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}